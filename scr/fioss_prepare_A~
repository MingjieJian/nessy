#!/bin/bash
#****************************************************************
if [[ "$0" =~ '((/bin/)|(^-))bash' ]]; then
  # We want to copy the scrip to the run directory. Not possible if sourced
  echo "Error: Script must be called, not sourced! - exit"
else
source $COSI_BIN/helper_scripts
#function error(){
#  echo "Abnormal Script Termination"
#  exit
#}


function error_f(){
__ERROR_F=""
echo "checking files"
 for A in $@; do 
   if [[ -a $1 ]]; then echo -n;  else 
     echo "File/Directory not found: $1"
     __ERROR_F=1
   fi;
 done
 echo "done: $__ERROR_F"
 [[ "$__ERROR_F" == "" ]] || error "File/Directory not found"
}

function error_ifunset() {
  ERRVAR=""
  for A in $@; do 
    [[ `getVar $A` == "" ]] &&  ERRVAR="$ERRVAR $A"
  done
  [[ $ERRVAR == "" ]] ||  error "Variable(s)$ERRVAR is/are not set"
}
trap error ERR
SCRIPT="$0"

[[ `dirname $0` == '.' ]] && SCRIPT=`pwd`/`basename $SCRIPT`
CP='kfmclient copy'
CP='cp -rfv '

source fioss.settings


error_ifunset EXE_DIR         CROSS_SECTION_FILES    \
              ORIG_COSI       ORIG_EXE                     \
              INPUT_SUN_FILE  INPUT_STARK_BROAD  UVVISIR_FILE           \
              OUTPUT_DIR 


# Frequencies to calculate - FREQ_START:FREQ_STEP:FREQ_STOP
function isSet(){
 [[ 'X'$1 != 'X' ]]
}

echo \
"--------------------------------------
EXE_DIR=        $EXE_DIR
ORIG_COSI=      $ORIG_COSI
ORIG_EXE=       $ORIG_EXE
INPUT_SUN_FILE= $INPUT_SUN_FILE
INPUT_STARK_BROAD= $INPUT_START_BROAD
UVVISIR_FILE=   $UVVISIR_FILE
OUTPUT_DIR=     $OUTPUT_DIR
X_SECTION_FILES=$CROSS_SECTION_FILES

-------------------------------------
Nothing done yet."


error_f  $ORIG_COSI  $ORIG_EXE   $INPUT_SUN_FILE  $INPUT_STARK_BROAD  $UVVISIR_FILE  $CROSS_SECTION_FILES 

[[ -e $OUTPUT_DIR ]] && error "direcotry $OUTPUT_DIR exists"
read -p "Wait 4sec or press any key to continue. Press C-c to chancel" # -n 1 -t 4;
echo "Starting..."
set -v
mkdir -p ${EXE_DIR}


mkdir -p  $OUTPUT_DIR
$CP fioss.settings $OUTPUT_DIR
cd "$FIOSS_SRC"
  tar -czf $OUTPUT_DIR/fioss-src.tgz *.for


$CP $ORIG_EXE/*.exe ${EXE_DIR}
cd        $OUTPUT_DIR
pwd
#	mv radioc  RADIOC
#	mv radiocl RADIOCL
#	mv radiol  RADIOL

#     ${ORIG_COSI}/RADIOCL \
$CP  ${ORIG_COSI}/FAL_VD   ./ 
$CP  ${ORIG_COSI}/MODFILE  ./
$CP  ${ORIG_COSI}/FGRID	   ./
$CP  ${ORIG_COSI}/DATOM	   ./
$CP  ${ORIG_COSI}/RADIOC   ./
$CP  ${ORIG_COSI}/RADIOL   ./
$CP  ${ORIG_COSI}/POPNUM   ./
#  new sasha
$CP  /scratch/shapiroa/Data/Mollist/c2.asc ./ 
$CP  /scratch/shapiroa/Data/Mollist/ch.asc ./
$CP  /scratch/shapiroa/Data/Mollist/cn.asc ./
$CP  /scratch/shapiroa/Data/Mollist/co.asc ./
$CP  /scratch/shapiroa/Data/Mollist/h2.asc ./
$CP  /scratch/shapiroa/Data/Mollist/nh.asc ./
$CP  /scratch/shapiroa/Data/Mollist/oh.asc ./
$CP  /scratch/shapiroa/Data/Mollist/o2.asc ./
$CP  /scratch/shapiroa/Data/Mollist/O2_H ./
$CP  /scratch/shapiroa/Data/Mollist/add/fudge_As.txt ./
$CP  ${ORIG_COSI}/MolConc.txt   ./
#  new sasha
$CP  $SCRIPT	           ./
$CP  ${CROSS_SECTION_FILES}/*---*  ./
$CP  $INPUT_STARK_BROAD/*  ./
$CP  $ORIG_EXE/fioss8.exe ./
#$CP  ${VELO_FILE} ./VELO			
$CP  $INPUT_SUN_FILE ./input_sun


## Check if the UVVISIR_FILE is a directory
if [[ -d "../ITx/fort.19.d" ]];  then
   ln -s ../ITx/fort.19.d fort.19.d
elif [[ -f "../ITx/fort.19" ]]; then
   ln -s ../ITx/fort.19.d fort.19.d
elif [[ -d ${UVVISIR_FILE} ]]; then
   $CP ${UVVISIR_FILE} ./fort.19.d/
elif [[ `file -bi $UVVISIR_FILE` == "application/x-gzip" ]]; then
     gunzip -vc $UVVISIR_FILE > ./fort.19 
else
     $CP $UVVISIR_FILE ./fort.19
fi


if ( isSet $ORIG_COSI2 ); then
  echo "Overwriting files from $ORIG_COSI with files from $ORIG_COSI2 in `pwd`"
   cp -rf $ORIG_COSI2/* ./
fi;

cat > fort.55 << eof
0 75 1
1 0 0
0 70717273 29 25 0 0 0
4003. 6000. 30. 1.e-40 10.
XXXXX
eof
cat > fort.56 << eof
30
    1      -1.000
    2      -1.000
    3      -1.000
    4      -1.000
    5      -1.000
    6      -1.000
    7      -1.000
    8      -1.000
    9      -1.000
   10      -1.000
   11      -1.000
   12      -1.000
   13      -1.000
   14      -1.000
   15      -1.000
   16      -1.000
   17      -1.000
   18      -1.000
   19      -1.000
   20      -1.000
   21      -1.000
   22      -1.000
   23      -1.000
   24      -1.000
   25      -1.000
   26      -1.000
   27      -1.000
   28      -1.000
   29      -1.000
   30      -1.000
eof


echo "-------------------- Prepared the run"
pwd
fi;
